function exportToExcel() {
    try {
        const table = document.getElementById('editableTable');
        const tableTitle = document.getElementById('tableTitle').value || '–¢–∞–±–ª–∏—Ü–∞';

        if (!table.rows.length) {
            alert('–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É.');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º XML –¥–ª—è Excel
        let xmlContent = '<?xml version="1.0"?>\n';
        xmlContent += '<?mso-application progid="Excel.Sheet"?>\n';
        xmlContent += '<Workbook xmlns="urn:schemas-microsoft-com:office:spreadsheet"\n';
        xmlContent += ' xmlns:o="urn:schemas-microsoft-com:office:office"\n';
        xmlContent += ' xmlns:x="urn:schemas-microsoft-com:office:excel"\n';
        xmlContent += ' xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"\n';
        xmlContent += ' xmlns:html="http://www.w3.org/TR/REC-html40">\n';
        xmlContent += '<Worksheet ss:Name="' + tableTitle + '">\n';
        xmlContent += '<Table>\n';

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        for (let i = 0; i < table.rows.length; i++) {
            xmlContent += '<Row>\n';
            const cells = table.rows[i].cells;
            
            for (let j = 0; j < cells.length; j++) {
                let cellValue = cells[j].textContent || '';
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ XML —Å–∏–º–≤–æ–ª—ã
                cellValue = cellValue.replace(/&/g, '&amp;')
                                    .replace(/</g, '&lt;')
                                    .replace(/>/g, '&gt;')
                                    .replace(/"/g, '&quot;')
                                    .replace(/'/g, '&apos;');
                
                xmlContent += '<Cell><Data ss:Type="String">' + cellValue + '</Data></Cell>\n';
            }
            xmlContent += '</Row>\n';
        }

        xmlContent += '</Table>\n';
        xmlContent += '</Worksheet>\n';
        xmlContent += '</Workbook>';

        // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = new Blob([xmlContent], { type: 'application/vnd.ms-excel' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);

        link.setAttribute('href', url);
        link.setAttribute('download', tableTitle + '.xls');
        link.style.visibility = 'hidden';

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        alert('–¢–∞–±–ª–∏—Ü–∞ "' + tableTitle + '" —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Excel!');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ' + error.message);
    }
}
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π –∏ –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
let trialTimeLeft = 60; // 1 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
let isTrialActive = false;
let isPremium = false;

function startTrial() {
    isTrialActive = true;
    trialTimeLeft = 60; // 1 –º–∏–Ω—É—Ç
    localStorage.setItem('trialStart', Date.now().toString());
    localStorage.setItem('trialActive', 'true');
    hideSubscriptionModal();
    startTrialTimer();
    updateUI();
}

function subscribe() {
    // –ó–¥–µ—Å—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    isPremium = true;
    isTrialActive = false;
    localStorage.setItem('premium', 'true');
    hideSubscriptionModal();
    updateUI();
    alert('üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏! –¢–µ–ø–µ—Ä—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!');
}

function showSubscriptionModal() {
    document.getElementById('subscriptionModal').style.display = 'flex';
}

function hideSubscriptionModal() {
    document.getElementById('subscriptionModal').style.display = 'none';
}

function startTrialTimer() {
    const timerElement = document.getElementById('trialTimer');
    const trialBanner = document.getElementById('trialInfo');
    
    trialBanner.style.display = 'flex';
    
    const timer = setInterval(() => {
        if (trialTimeLeft <= 0) {
            clearInterval(timer);
            trialBanner.style.display = 'none';
            isTrialActive = false;
            showSubscriptionModal();
            return;
        }
        
        const minutes = Math.floor(trialTimeLeft / 60);
        const seconds = trialTimeLeft % 60;
        timerElement.textContent = ${minutes}:${seconds.toString().padStart(2, '0')};
        trialTimeLeft--;
    }, 1000);
}

function checkTrialStatus() {
    const trialStart = localStorage.getItem('trialStart');
    const trialActive = localStorage.getItem('trialActive');
    const premium = localStorage.getItem('premium');
    
    if (premium === 'true') {
        isPremium = true;
        return;
    }
    
    if (trialActive === 'true' && trialStart) {
        const timePassed = Math.floor((Date.now() - parseInt(trialStart)) / 1000);
        trialTimeLeft = Math.max(0, 600 - timePassed);
        
        if (trialTimeLeft > 0) {
            isTrialActive = true;
            startTrialTimer();
        } else {
            showSubscriptionModal();
        }
    } else {
        showSubscriptionModal();
    }
}

function updateUI() {
    const exportBtn = document.getElementById('exportBtn');
    
    if (isPremium || isTrialActive) {
        exportBtn.disabled = false;
        exportBtn.style.opacity = '1';
    } else {
        exportBtn.disabled = true;
        exportBtn.style.opacity = '0.6';
    }
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
function exportToExcel() {
    if (!isPremium && !isTrialActive) {
        showSubscriptionModal();
        return;
    }
    
    // –¢–≤–æ—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    try {
        const table = document.getElementById('editableTable');
        const tableTitle = document.getElementById('tableTitle').value || '–¢–∞–±–ª–∏—Ü–∞';

        if (!table.rows.length) {
            alert('–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É.');
            return;
        }

        // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞ ...
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: ' + error.message);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    checkTrialStatus();
    updateUI();
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    document.querySelector('.close').addEventListener('click', hideSubscriptionModal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    window.addEventListener('click', function(event) {
        const modal = document.getElementById('subscriptionModal');
        if (event.target === modal) {
            hideSubscriptionModal();
        }
    });
});
